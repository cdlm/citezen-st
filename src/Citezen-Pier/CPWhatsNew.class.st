Class {
	#name : #CPWhatsNew,
	#superclass : #PRWidget,
	#instVars : [
		'timestamp',
		'modificationTime'
	],
	#category : #'Citezen-Pier'
}

{ #category : #constants }
CPWhatsNew class >> archiveDir [
	^ '/home/scg/scg.unibe.ch/web/archive'
]

{ #category : #accessing }
CPWhatsNew class >> descriptionBibFile [
	^ PRStructureDescription new
		addCondition: (MACondition selector: #isKindOf: argument: CPBibFile)
			labelled: 'Select an existing Bib File';
		accessor: #bibFile;
		label: 'Bib File';
		priority: 10;
		beEditable;
		beRequired;
		yourself
]

{ #category : #constants }
CPWhatsNew class >> evolvingObjects [
	"There shoould be at least 4 newer pdfs than this one"
	^ '/home/scg/scg.unibe.ch/web/archive/papers/Deza08bEvolvingObjects.pdf'
]

{ #category : #constants }
CPWhatsNew class >> glamour [
	"The last pdf added to the old feed"
	^ '/home/scg/scg.unibe.ch/web/archive/masters/Bung09a.pdf'
]

{ #category : #accessing }
CPWhatsNew class >> groupLabel [
	^ 'Pier Bibliography'
]

{ #category : #accessing }
CPWhatsNew class >> isAbstract [
	^ false
]

{ #category : #accessing }
CPWhatsNew class >> label [
	^ 'What''s new blog'
]

{ #category : #accessing }
CPWhatsNew >> bibFile [
	^ self read: #descriptionBibFile
]

{ #category : #initialization }
CPWhatsNew >> initialize [
	super initialize.
	self initializeTimestamp.
]

{ #category : #initialization }
CPWhatsNew >> initializeTimestamp [
	"for testing"
	timestamp := (Rio new: self class evolvingObjects) modificationTime.
	"timestamp := (Rio new: self class glamour) modificationTime."
]

{ #category : #evaluation }
CPWhatsNew >> newPdfs [
	| lastTimestamp pdfs newFilenames entries |
	lastTimestamp := timestamp.
	"uncomment this when deployed:"
	"self updateTimestamp."
	pdfs := (Rio new: self class archiveDir) beRecursive
		select: [:pdf |
				"(pdf fileName endsWith: 'dummy.pdf') ifTrue: [self halt]."
				pdf isFile
				and: [pdf fileName endsWith: '.pdf']
				and: [pdf modificationTime > lastTimestamp]].
	newFilenames := pdfs collect: [:pdf | pdf fileName].
	entries := (self bibFile bibList entries
				select: [:entry | newFilenames
						anySatisfy: [:fileName | entry containsKeyword: fileName]]).
	^ CPQueryResult new
		querySpec: (CPQuerySpec default bibFile: self bibFile);
		bibList: (CPBibList entries: entries) 
]

{ #category : #seaside }
CPWhatsNew >> renderContentOn: html [
	html render: self newPdfs
]

{ #category : #initialization }
CPWhatsNew >> updateTimestamp [
	timestamp := TimeStamp now.
]
