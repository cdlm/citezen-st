"
A CZDocument represents a document. It takes all the elements, an outputer, and create the final file on the hard drive.

Example: 

CZDocument new
	addElement: (CZCommentElement new comment: 'Generated by Citezen -- http://www.pharo-project.org');
	addElement: (CZTitleElement new title: 'Bibliography : '; htmlLevel: 2);
	addElement: (CZTitleElement new title: 'Script 1'; htmlLevel: 3);
	addElement: script1;
	addElement: (CZTitleElement new title: 'Script 2'; htmlLevel: 3);
	addElement: script2;
	exportAsHtml;
	inputFile: '/Users/.../myReferences.bib';
	outputFile: '/Users/.../myWebPage.html';
	generate
	
Some details about theses messages: (all messages are in the interface protocol)
- addElement: aDocumentElement -> adds an element to the document (CZCommentElement, CZTitleElement, CZScript). The elements will be displayed in the order they were added.
- doNotRestartOrderedListAtEachScript & restartOrderedListAtEachScript -> In xHTML, corresponds to specifie the ""start"" parameter to 1 or to last index of previous script + 1.
- exportAsBib & exportAsHtml -> choose the export format (default is BibTeX)
- footer: aString & header: aString -> specifies a header or a footer (ignored by the BibTeX outputer)
- inputFile: aString & outputFile: aString -> specifies the paths of input and output files
- orderedList & unorderedList -> choice between <ol> and <ul>
- withHeaderAndFooter & withoutHeaderAndFooter -> if you want to generate some xHTML code and include it in another web page, send withoutHeaderAndFooter (by default, they are displayed)
- getLastOutput -> returns a String containing the last output
- generate -> generates the document, shoud be the LAST message you send ; it returns a string containing the document too
"
Class {
	#name : #CZDocument,
	#superclass : #Object,
	#instVars : [
		'originalBibset',
		'outputFile',
		'outputer',
		'elements',
		'entriesDisplayed',
		'listIndex',
		'restartOrdered',
		'withoutHeaderAndFooter',
		'header',
		'footer',
		'changed',
		'authorDisplay',
		'inputFile'
	],
	#classInstVars : [
		'exportTypeMatching'
	],
	#category : #'Citezen-Script'
}

{ #category : #'as yet unclassified' }
CZDocument class >> bibExporterEncoding [
	^ #bib
]

{ #category : #'as yet unclassified' }
CZDocument class >> defaultExportType [ 
	^ self bibExporterEncoding 
]

{ #category : #'as yet unclassified' }
CZDocument class >> defaultOutputer [ 
	^ self matchType: self defaultExportType 
]

{ #category : #'as yet unclassified' }
CZDocument class >> htmlExporterEncoding [
	^ #html
]

{ #category : #'as yet unclassified' }
CZDocument class >> initializeExportTypeMatching [
	exportTypeMatching := Dictionary new.
	exportTypeMatching 
		add: (self bibExporterEncoding) -> CZRawOutputer;
		add: (self htmlExporterEncoding) -> CZHtmlOutputer 
		
]

{ #category : #'as yet unclassified' }
CZDocument class >> matchType: aString [
	exportTypeMatching ifNil: [ self initializeExportTypeMatching ].
	^ exportTypeMatching at: aString ifAbsent: self defaultExportType
]

{ #category : #'as yet unclassified' }
CZDocument >> acceptVisitor: aVisitor [
	aVisitor visitDocument: self
]

{ #category : #interface }
CZDocument >> addElement: aDocumentElement [
	(aDocumentElement isNil | elements includes: aDocumentElement)
		ifFalse: [ 
			elements add: aDocumentElement.
			(aDocumentElement class = CZScript) 
				ifTrue: [ 
					aDocumentElement document: self.
					(changed) ifFalse: [ changed := true. elements removeFirst ] ] ]
]

{ #category : #'as yet unclassified' }
CZDocument >> addEntriesDisplayed: aNumber [
	restartOrdered ifFalse: [
	listIndex := listIndex + aNumber ]
]

{ #category : #interface }
CZDocument >> createBibSetFromPath [
	originalBibset := CZBibParser parse: ((FileStream readOnlyFileNamed: inputFile) contents).
	originalBibset scope: CZSet standardDefinitions 
]

{ #category : #interface }
CZDocument >> displayFullName [
	authorDisplay := CZPeople displayFullName
]

{ #category : #interface }
CZDocument >> displayNormalizedName [
	authorDisplay := CZPeople displayNormalizedName
]

{ #category : #interface }
CZDocument >> displayShortenedName [
	authorDisplay := CZPeople displayShortenedName
]

{ #category : #interface }
CZDocument >> doNotRestartOrderedListAtEachScript [
	restartOrdered := false
]

{ #category : #'as yet unclassified' }
CZDocument >> elements [
	^ elements 
]

{ #category : #interface }
CZDocument >> exportAsBib [
	self exportType: self class bibExporterEncoding
]

{ #category : #interface }
CZDocument >> exportAsHtml [
	self exportType: self class htmlExporterEncoding
]

{ #category : #'as yet unclassified' }
CZDocument >> exportType: aString [
	outputer := (self class matchType: aString) new
]

{ #category : #'as yet unclassified' }
CZDocument >> footer [
	^ footer
]

{ #category : #interface }
CZDocument >> footer: aString [
	footer := aString 
]

{ #category : #interface }
CZDocument >> generate [
	self createBibSetFromPath.
	
	outputer ifNil: [ outputer := self class defaultOutputer ].
	outputer setOutputFile: outputFile.
	outputer setAuthorDisplayOption: authorDisplay.
	
	outputer getOutputFor: self.
	Transcript cr; show: '(Citezen >) ', outputFile, ' was successfully generated'.
	^ self getLastOutput
	
	

]

{ #category : #interface }
CZDocument >> getLastOutput [
	^ outputer getLastOutput
]

{ #category : #'as yet unclassified' }
CZDocument >> getWithoutHeaderAndFooter [
	^ withoutHeaderAndFooter 
]

{ #category : #'as yet unclassified' }
CZDocument >> header [ 
	^ header 
]

{ #category : #interface }
CZDocument >> header: aString [
	header := aString 
]

{ #category : #'as yet unclassified' }
CZDocument >> initialize [ 
	super initialize.
	
	self unorderedList.
	withoutHeaderAndFooter := false.
	header := nil.
	footer := nil.
	changed := false.
	elements := OrderedCollection new.
	self addElement: CZScript new.
]

{ #category : #interface }
CZDocument >> inputFile: aString [
	inputFile := aString
]

{ #category : #'as yet unclassified' }
CZDocument >> listIndex [
	^ listIndex
]

{ #category : #interface }
CZDocument >> orderedList [
	listIndex := 1.
	restartOrdered := true
]

{ #category : #'as yet unclassified' }
CZDocument >> originalBibset [
	^ originalBibset 
]

{ #category : #interface }
CZDocument >> outputFile: aString [
	outputFile := aString
]

{ #category : #'as yet unclassified' }
CZDocument >> requestBibset [
	^ originalBibset copyTwoLevel
]

{ #category : #interface }
CZDocument >> restartOrderedListAtEachScript [
	restartOrdered := true
]

{ #category : #interface }
CZDocument >> unorderedList [
	listIndex := 0
]

{ #category : #interface }
CZDocument >> withHeaderAndFooter [
	withoutHeaderAndFooter := false
]

{ #category : #interface }
CZDocument >> withoutHeaderAndFooter [
	withoutHeaderAndFooter := true
]
